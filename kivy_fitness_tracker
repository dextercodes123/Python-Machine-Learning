import csv
import os
from datetime import datetime

from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.screenmanager import Screen, ScreenManager
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.spinner import Spinner
from kivy.uix.scrollview import ScrollView
from kivy.uix.gridlayout import GridLayout
from kivy.core.window import Window

# Set background to white
Window.clearcolor = (1, 1, 1, 1)

CSV_FILE = "fitness_logs.csv"
FIELDNAMES = [
    "Date", "Category", "Exercise", "Weight (lbs)", "Reps",
    "Distance (mi)", "Time (min)", "Speed (mph)", "Notes"
]

def init_csv():
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, mode="w", newline="") as file:
            writer = csv.DictWriter(file, fieldnames=FIELDNAMES)
            writer.writeheader()

class HomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", padding=20, spacing=15)
        btn_style = {
            "background_color": (0, 0.6, 0, 1),
            "color": (1, 1, 1, 1),
            "font_size": 20,
            "size_hint": (1, None),
            "height": 60,
        }

        for text, screen_name in [
            ("Log Cardio", "log_cardio"),
            ("Log Strength", "log_strength"),
            ("Log Sport", "log_sport"),
            ("üìã View Logs", "view_logs")
        ]:
            btn = Button(text=text, **btn_style)
            btn.bind(on_press=lambda x, screen=screen_name: setattr(self.manager, "current", screen))
            layout.add_widget(btn)

        self.add_widget(layout)

class LogScreen(Screen):
    def __init__(self, category, **kwargs):
        super().__init__(**kwargs)
        self.category = category
        layout = BoxLayout(orientation="vertical", spacing=10, padding=10)
        self.inputs = {}

        self.inputs["Date"] = TextInput(text=datetime.now().strftime("%Y-%m-%d"), hint_text="Date (YYYY-MM-DD)")
        layout.add_widget(self.inputs["Date"])

        self.inputs["Exercise"] = TextInput(hint_text="Exercise")
        layout.add_widget(self.inputs["Exercise"])

        for field in ["Weight (lbs)", "Reps", "Distance (mi)", "Time (min)", "Speed (mph)", "Notes"]:
            self.inputs[field] = TextInput(hint_text=field)
            layout.add_widget(self.inputs[field])

        save_btn = Button(text="‚úÖ Save Log", background_color=(0, 0.6, 0, 1), color=(1, 1, 1, 1))
        save_btn.bind(on_press=self.save_log)
        layout.add_widget(save_btn)

        back_btn = Button(text="‚¨ÖÔ∏è Back", background_color=(0, 0.6, 0, 1), color=(1, 1, 1, 1))
        back_btn.bind(on_press=lambda x: setattr(self.manager, "current", "home"))
        layout.add_widget(back_btn)

        self.status_label = Label()
        layout.add_widget(self.status_label)

        self.add_widget(layout)

    def save_log(self, instance):
        log = {
            "Date": self.inputs["Date"].text or datetime.now().strftime("%Y-%m-%d"),
            "Category": self.category,
            "Exercise": self.inputs["Exercise"].text,
            "Weight (lbs)": self.inputs["Weight (lbs)"].text,
            "Reps": self.inputs["Reps"].text,
            "Distance (mi)": self.inputs["Distance (mi)"].text,
            "Time (min)": self.inputs["Time (min)"].text,
            "Speed (mph)": self.inputs["Speed (mph)"].text,
            "Notes": self.inputs["Notes"].text,
        }

        try:
            with open(CSV_FILE, mode="a", newline="") as file:
                writer = csv.DictWriter(file, fieldnames=FIELDNAMES)
                writer.writerow(log)
            self.status_label.text = "‚úÖ Log saved!"
            for field in self.inputs.values():
                field.text = ""
        except Exception as e:
            self.status_label.text = f"‚ùå Error: {e}"

class ViewLogsScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=10, spacing=10)

        self.scroll = ScrollView()
        self.table = GridLayout(cols=len(FIELDNAMES), size_hint_y=None, spacing=5)
        self.table.bind(minimum_height=self.table.setter('height'))
        self.scroll.add_widget(self.table)

        refresh_btn = Button(text="üîÑ Refresh", background_color=(0, 0.6, 0, 1), color=(1, 1, 1, 1))
        refresh_btn.bind(on_press=self.load_logs)

        back_btn = Button(text="‚¨ÖÔ∏è Back", background_color=(0, 0.6, 0, 1), color=(1, 1, 1, 1))
        back_btn.bind(on_press=lambda x: setattr(self.manager, "current", "home"))

        layout.add_widget(refresh_btn)
        layout.add_widget(self.scroll)
        layout.add_widget(back_btn)
        self.add_widget(layout)

        self.load_logs()

    def load_logs(self, instance=None):
        self.table.clear_widgets()

        for field in FIELDNAMES:
            self.table.add_widget(Label(text=f"[b]{field}[/b]", markup=True, size_hint_y=None, height=30, color=(0, 0.6, 0, 1)))

        try:
            with open(CSV_FILE, mode="r") as file:
                reader = csv.DictReader(file)
                for row in reader:
                    for field in FIELDNAMES:
                        self.table.add_widget(Label(text=row.get(field, ""), size_hint_y=None, height=30, color=(0, 0, 0, 1)))
        except Exception as e:
            self.table.add_widget(Label(text=f"Error loading logs: {e}", size_hint_y=None, height=30))

class FitnessApp(App):
    def build(self):
        init_csv()
        sm = ScreenManager()
        sm.add_widget(HomeScreen(name="home"))
        sm.add_widget(LogScreen(name="log_cardio", category="Cardio"))
        sm.add_widget(LogScreen(name="log_strength", category="Strength"))
        sm.add_widget(LogScreen(name="log_sport", category="Sport"))
        sm.add_widget(ViewLogsScreen(name="view_logs"))
        return sm

if __name__ == "__main__":
    FitnessApp().run()




